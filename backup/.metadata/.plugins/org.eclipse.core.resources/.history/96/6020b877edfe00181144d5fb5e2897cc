import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Garage {

	private int spaces;
	private static List<Vehicle> listVehicle = new ArrayList<>();

	public Garage(int spaces) {
		this.spaces = spaces;
	}

	public String addVehicle(Vehicle vehicle) {
		if (listVehicle.size() < spaces) {
			listVehicle.add(vehicle);
			return "Added! :: " + vehicle;
		} else {
			return "Garage Full! Not Added! ::  "+ vehicle ;
		}
	}

	public String removeVehicle(String reg) {
		listVehicle.removeAll(
				listVehicle.stream().filter(v -> v.getRegistration().equals(reg)).collect(Collectors.toList()));
		return "removed";
	}

	public void Cost(double time) {
		// List<Vehicle> tempList = new ArrayList<>();
		for (Vehicle vehicle : listVehicle) {
			int lengthMeters = vehicle.getLengthMeters();
			int wheels = vehicle.getWheels();
			double parkingCost = lengthMeters * wheels * time;
			System.out.println(vehicle + "Cost: " + parkingCost);

		}

	}

	public void Cost(Double time, String reg) {
		List<Vehicle> tempList = listVehicle.stream().filter(vehicle -> vehicle.getRegistration().equals(reg))
				.collect(Collectors.toList());

		if (tempList.size() == 0) {
System.out.println("Cost Failure :: No Match");
		} else {
			int lengthMeters = tempList.get(0).getLengthMeters();
			int wheels = tempList.get(0).getWheels();

			double parkingCost = lengthMeters * wheels * time;
			removeVehicle(reg);
			// System.out.print("Total Cost for repair on "+type+ reg +"is: ");
			System.out.println(
					"Total Cost for repair on: " + tempList + "Cost: " + parkingCost + " Removed From Garage.");
		}

	}

	public int getSpaces() {
		return spaces;
	}

	public void setSpaces(int spaces) {
		this.spaces = spaces;
	}

}
